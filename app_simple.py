"""
TCC Gado Gordo - Vers√£o Simplificada
An√°lise estat√≠stica de dados de mercado de bovinos
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import io
import os

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="TCC Gado Gordo - Simplificado",
    page_icon="üêÇ",
    layout="wide"
)

# Criar diret√≥rios necess√°rios
os.makedirs('output', exist_ok=True)

# Fun√ß√£o para limpar dados
def clean_data(df):
    """Limpeza b√°sica dos dados"""
    # Converter colunas num√©ricas
    numeric_columns = ['PESO (KG)', 'VALOR', 'PRE√áO POR KG', 'ARROBA GORDO', 'ARROBA MAGRO', '% √ÅGIO']
    
    for col in numeric_columns:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce')
    
    # Remover linhas com valores nulos cr√≠ticos
    if 'PRE√áO POR KG' in df.columns:
        df = df.dropna(subset=['PRE√áO POR KG'])
    
    return df

# Fun√ß√£o para gerar dados de exemplo
def generate_sample_data():
    """Gerar dados de exemplo para teste"""
    np.random.seed(42)
    n = 100
    
    data = {
        'ANO': np.random.choice([2022, 2023, 2024], n),
        'TRIMESTRE': np.random.choice([1, 2, 3, 4], n),
        'ESTADO': np.random.choice(['MG', 'SP', 'MT', 'GO', 'RS'], n),
        'RA√áA': np.random.choice(['Nelore', 'Angus', 'Hereford', 'Gir'], n),
        'G√äNERO': np.random.choice(['Macho', 'F√™mea'], n),
        'ERA': np.random.choice(['Novilho', 'Vaca', 'Touro'], n),
        'VIA': np.random.choice(['Gado Gordo', 'Gado Magro'], n),
        'TIPO GADO GORDO': np.random.choice(['Confinado', 'Pastagem'], n),
        'PESO (KG)': np.random.normal(450, 50, n).round(0),
        'VALOR': np.random.normal(2000, 300, n).round(2),
    }
    
    df = pd.DataFrame(data)
    
    # Calcular derivadas
    df['PRE√áO POR KG'] = (df['VALOR'] / df['PESO (KG)']).round(2)
    df['ARROBA GORDO'] = (df['PRE√áO POR KG'] * 15).round(2)
    df['ARROBA MAGRO'] = (df['ARROBA GORDO'] * 0.9).round(2)
    df['% √ÅGIO'] = ((df['ARROBA MAGRO'] / df['ARROBA GORDO']) - 1).round(3)
    
    return df

# Fun√ß√£o para estat√≠sticas descritivas
def get_descriptive_stats(df):
    """Calcular estat√≠sticas descritivas"""
    if 'PRE√áO POR KG' not in df.columns:
        return {}
    
    price_col = df['PRE√áO POR KG']
    
    stats = {
        'Total de Registros': len(df),
        'M√©dia': price_col.mean(),
        'Mediana': price_col.median(),
        'Desvio Padr√£o': price_col.std(),
        'M√≠nimo': price_col.min(),
        'M√°ximo': price_col.max(),
        'Primeiro Quartil': price_col.quantile(0.25),
        'Terceiro Quartil': price_col.quantile(0.75)
    }
    
    return stats

# Fun√ß√£o para gerar gr√°ficos
def create_plots(df):
    """Criar gr√°ficos principais"""
    plots = []
    
    if 'PRE√áO POR KG' not in df.columns:
        return plots
    
    # 1. Histograma de pre√ßos
    fig1 = px.histogram(
        df, x='PRE√áO POR KG', 
        title='Distribui√ß√£o de Pre√ßos por KG',
        labels={'PRE√áO POR KG': 'Pre√ßo (R$/kg)', 'count': 'Frequ√™ncia'}
    )
    plots.append(('Histograma de Pre√ßos', fig1))
    
    # 2. Box plot por Estado
    if 'ESTADO' in df.columns:
        fig2 = px.box(
            df, x='ESTADO', y='PRE√áO POR KG',
            title='Pre√ßos por Estado'
        )
        plots.append(('Box Plot por Estado', fig2))
    
    # 3. Box plot por Ra√ßa
    if 'RA√áA' in df.columns:
        fig3 = px.box(
            df, x='RA√áA', y='PRE√áO POR KG',
            title='Pre√ßos por Ra√ßa'
        )
        plots.append(('Box Plot por Ra√ßa', fig3))
    
    # 4. Scatter Peso vs Pre√ßo
    if 'PESO (KG)' in df.columns:
        fig4 = px.scatter(
            df, x='PESO (KG)', y='PRE√áO POR KG',
            title='Rela√ß√£o Peso vs Pre√ßo',
            labels={'PESO (KG)': 'Peso (kg)', 'PRE√áO POR KG': 'Pre√ßo (R$/kg)'}
        )
        plots.append(('Peso vs Pre√ßo', fig4))
    
    return plots

# Interface principal
st.title("üêÇ TCC Gado Gordo - Vers√£o Simplificada")
st.markdown("### An√°lise Estat√≠stica de Dados de Mercado de Bovinos")

# Sidebar para upload
st.sidebar.header("üìÅ Upload de Dados")

upload_option = st.sidebar.radio(
    "Escolha uma op√ß√£o:",
    ["üìä Usar Dados de Exemplo", "üì§ Fazer Upload de Arquivo"]
)

if upload_option == "üìä Usar Dados de Exemplo":
    if st.sidebar.button("Gerar Dados de Exemplo"):
        df = generate_sample_data()
        st.session_state['df'] = df
        st.success("‚úÖ Dados de exemplo carregados com sucesso!")

elif upload_option == "üì§ Fazer Upload de Arquivo":
    uploaded_file = st.sidebar.file_uploader(
        "Escolha um arquivo:",
        type=['csv', 'xlsx'],
        help="Formatos suportados: CSV, Excel (.xlsx)"
    )
    
    if uploaded_file is not None:
        try:
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file, encoding='utf-8')
            else:
                df = pd.read_excel(uploaded_file)
            
            df = clean_data(df)
            st.session_state['df'] = df
            st.success(f"‚úÖ Arquivo carregado: {uploaded_file.name}")
            
        except Exception as e:
            st.error(f"‚ùå Erro ao carregar arquivo: {str(e)}")

# Mostrar dados se dispon√≠vel
if 'df' in st.session_state:
    df = st.session_state['df']
    
    # Abas principais
    tab1, tab2, tab3 = st.tabs(["üìä Dados", "üìà Estat√≠sticas", "üìâ Gr√°ficos"])
    
    with tab1:
        st.subheader("üìã Visualiza√ß√£o dos Dados")
        
        # Filtros b√°sicos
        col1, col2 = st.columns(2)
        
        with col1:
            if 'ESTADO' in df.columns:
                estados = ['Todos'] + list(df['ESTADO'].unique())
                estado_selecionado = st.selectbox("Filtrar por Estado:", estados)
                if estado_selecionado != 'Todos':
                    df = df[df['ESTADO'] == estado_selecionado]
        
        with col2:
            if 'RA√áA' in df.columns:
                racas = ['Todas'] + list(df['RA√áA'].unique())
                raca_selecionada = st.selectbox("Filtrar por Ra√ßa:", racas)
                if raca_selecionada != 'Todas':
                    df = df[df['RA√áA'] == raca_selecionada]
        
        st.dataframe(df, use_container_width=True)
        
        # Download CSV
        csv = df.to_csv(index=False)
        st.download_button(
            label="üì• Baixar CSV",
            data=csv,
            file_name=f"dados_bovinos_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv"
        )
    
    with tab2:
        st.subheader("üìä Estat√≠sticas Descritivas")
        
        stats = get_descriptive_stats(df)
        
        if stats:
            # M√©tricas principais
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("Total de Registros", f"{stats['Total de Registros']:,}")
            
            with col2:
                st.metric("Pre√ßo M√©dio", f"R$ {stats['M√©dia']:.2f}")
            
            with col3:
                st.metric("Pre√ßo Mediano", f"R$ {stats['Mediana']:.2f}")
            
            with col4:
                st.metric("Desvio Padr√£o", f"R$ {stats['Desvio Padr√£o']:.2f}")
            
            # Tabela completa
            st.subheader("üìã Estat√≠sticas Detalhadas")
            
            stats_df = pd.DataFrame([
                {"Estat√≠stica": "M√©dia", "Valor": f"R$ {stats['M√©dia']:.2f}"},
                {"Estat√≠stica": "Mediana", "Valor": f"R$ {stats['Mediana']:.2f}"},
                {"Estat√≠stica": "Desvio Padr√£o", "Valor": f"R$ {stats['Desvio Padr√£o']:.2f}"},
                {"Estat√≠stica": "M√≠nimo", "Valor": f"R$ {stats['M√≠nimo']:.2f}"},
                {"Estat√≠stica": "M√°ximo", "Valor": f"R$ {stats['M√°ximo']:.2f}"},
                {"Estat√≠stica": "1¬∫ Quartil", "Valor": f"R$ {stats['Primeiro Quartil']:.2f}"},
                {"Estat√≠stica": "3¬∫ Quartil", "Valor": f"R$ {stats['Terceiro Quartil']:.2f}"},
            ])
            
            st.dataframe(stats_df, use_container_width=True)
        
        else:
            st.warning("‚ö†Ô∏è N√£o foi poss√≠vel calcular estat√≠sticas. Verifique se a coluna 'PRE√áO POR KG' existe nos dados.")
    
    with tab3:
        st.subheader("üìà Gr√°ficos e Visualiza√ß√µes")
        
        plots = create_plots(df)
        
        if plots:
            for title, fig in plots:
                st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è N√£o foi poss√≠vel gerar gr√°ficos. Verifique se os dados cont√™m as colunas necess√°rias.")

else:
    # P√°gina inicial
    st.markdown("""
    ## üöÄ Bem-vindo ao TCC Gado Gordo!
    
    Esta √© a vers√£o simplificada do aplicativo de an√°lise de dados de mercado de bovinos.
    
    ### üìã Como usar:
    
    1. **Upload de Dados**: Use o menu lateral para carregar seus dados
    2. **Dados de Exemplo**: Clique em "Usar Dados de Exemplo" para testar
    3. **An√°lise**: Explore os dados, estat√≠sticas e gr√°ficos nas abas
    
    ### üìä Colunas esperadas:
    - **ANO, TRIMESTRE, ESTADO**
    - **RA√áA, G√äNERO, ERA, VIA**
    - **PESO (KG), VALOR, PRE√áO POR KG**
    - **ARROBA GORDO, ARROBA MAGRO, % √ÅGIO**
    
    ### ‚ú® Funcionalidades:
    - üìä Visualiza√ß√£o de dados com filtros
    - üìà Estat√≠sticas descritivas completas
    - üìâ Gr√°ficos interativos (Plotly)
    - üì• Download em CSV
    - üáßüá∑ Formata√ß√£o brasileira
    
    ---
    **Vers√£o**: Simplificada  
    **Status**: Est√°vel e confi√°vel
    """)

# Footer
st.sidebar.markdown("---")
st.sidebar.info("""
**TCC Gado Gordo**  
Vers√£o Simplificada  
An√°lise de dados de bovinos
""")

