#!/usr/bin/env python3
"""
Script para verificar se h√° chaves de API ou informa√ß√µes sens√≠veis expostas no c√≥digo.
Execute este script antes de fazer commit para garantir que n√£o h√° dados sens√≠veis.
"""

import os
import re
from pathlib import Path

# Padr√µes de chaves sens√≠veis
SENSITIVE_PATTERNS = [
    r'AIza[0-9A-Za-z-_]{35}',  # Google API Key
    r'sk-[A-Za-z0-9]{48}',     # OpenAI API Key
    r'pk_[A-Za-z0-9]{24}',     # Stripe public key
    r'sk_[A-Za-z0-9]{24}',     # Stripe secret key
    r'[A-Za-z0-9+/]{40}={0,2}', # Generic base64 key
    r'[0-9a-f]{32}',           # MD5 hash
    r'[0-9a-f]{40}',           # SHA1 hash
    r'[0-9a-f]{64}',           # SHA256 hash
]

# Extens√µes de arquivo para verificar
FILE_EXTENSIONS = ['.py', '.js', '.ts', '.json', '.md', '.txt', '.yml', '.yaml']

# Arquivos/diret√≥rios para ignorar
IGNORE_PATHS = [
    '__pycache__',
    'node_modules',
    '.git',
    '.streamlit',
    'output',
    'build',
    'dist',
    '.env',
    'check_secrets.py',  # Este pr√≥prio arquivo
    'package-lock.json',  # Arquivos de lock do npm
    'yarn.lock'
]

def is_ignored_path(path):
    """Verifica se o caminho deve ser ignorado."""
    path_str = str(path)
    for ignore in IGNORE_PATHS:
        if ignore in path_str:
            return True
    return False

def check_file_for_secrets(file_path):
    """Verifica um arquivo em busca de chaves sens√≠veis."""
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()
            lines = content.split('\n')
            
        issues = []
        for i, line in enumerate(lines, 1):
            for pattern in SENSITIVE_PATTERNS:
                matches = re.findall(pattern, line)
                for match in matches:
                    # Ignorar se est√° em coment√°rio explicativo
                    if not (line.strip().startswith('#') and 'example' in line.lower()):
                        issues.append({
                            'line': i,
                            'content': line.strip(),
                            'match': match,
                            'pattern': pattern
                        })
        
        return issues
    except Exception as e:
        return [{'error': f'Erro ao ler arquivo: {e}'}]

def main():
    """Fun√ß√£o principal."""
    print("üîç Verificando chaves sens√≠veis no c√≥digo...")
    print("=" * 60)
    
    project_root = Path('.')
    total_issues = 0
    
    for file_path in project_root.rglob('*'):
        if (file_path.is_file() and 
            not is_ignored_path(file_path) and
            file_path.suffix in FILE_EXTENSIONS):
            
            issues = check_file_for_secrets(file_path)
            if issues:
                print(f"\nüö® {file_path}")
                for issue in issues:
                    if 'error' in issue:
                        print(f"   ‚ùå {issue['error']}")
                    else:
                        print(f"   ‚ö†Ô∏è  Linha {issue['line']}: {issue['content']}")
                        print(f"       Match: {issue['match']}")
                total_issues += len(issues)
    
    print("\n" + "=" * 60)
    if total_issues == 0:
        print("‚úÖ Nenhuma chave sens√≠vel encontrada!")
        print("‚úÖ Seu c√≥digo est√° seguro para commit.")
    else:
        print(f"üö® {total_issues} problema(s) encontrado(s)!")
        print("‚ùå N√ÉO fa√ßa commit at√© resolver estes problemas.")
        print("\nüí° Dicas:")
        print("   - Use vari√°veis de ambiente para chaves")
        print("   - Adicione .env ao .gitignore")
        print("   - Use exemplos gen√©ricos em documenta√ß√£o")
    
    return total_issues == 0

if __name__ == '__main__':
    success = main()
    exit(0 if success else 1)
